// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class NodeJsLambda extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'nodelambda:index:NodeJsLambda';

    /**
     * Returns true if the given object is an instance of NodeJsLambda.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodeJsLambda {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodeJsLambda.__pulumiType;
    }

    public /*out*/ readonly functionName!: pulumi.Output<string | undefined>;

    /**
     * Create a NodeJsLambda resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodeJsLambdaArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["handler"] = args ? args.handler : undefined;
            resourceInputs["memorySize"] = args ? args.memorySize : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["functionName"] = undefined /*out*/;
        } else {
            resourceInputs["functionName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodeJsLambda.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a NodeJsLambda resource.
 */
export interface NodeJsLambdaArgs {
    handler?: pulumi.Input<string>;
    memorySize?: pulumi.Input<number>;
    path: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
     *
     * The following arguments are optional:
     */
    role: pulumi.Input<string>;
    /**
     * Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
     */
    runtime: pulumi.Input<string>;
}
